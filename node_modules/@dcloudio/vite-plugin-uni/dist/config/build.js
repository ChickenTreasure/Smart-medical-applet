"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createBuild = void 0;
const uni_cli_shared_1 = require("@dcloudio/uni-cli-shared");
const shared_1 = require("@vue/shared");
function createBuild(options, config) {
    var _a, _b, _c;
    (0, uni_cli_shared_1.initEasycomsOnce)(options.inputDir, {
        dirs: [(0, uni_cli_shared_1.resolveComponentsLibPath)()],
        platform: process.env.UNI_PLATFORM,
    });
    const rollupOutputOption = (_b = (_a = config.build) === null || _a === void 0 ? void 0 : _a.rollupOptions) === null || _b === void 0 ? void 0 : _b.output;
    const sourcemap = process.env.SOURCEMAP === 'true' ? 'hidden' : (_c = config.build) === null || _c === void 0 ? void 0 : _c.sourcemap;
    return {
        sourcemap,
        cssTarget: uni_cli_shared_1.cssTarget,
        chunkSizeWarningLimit: 100000000,
        minify: config.build && (0, shared_1.hasOwn)(config.build, 'minify')
            ? config.build.minify
            : process.env.NODE_ENV === 'production'
                ? 'terser'
                : false,
        rollupOptions: {
            onwarn(warning, warn) {
                if (warning.code === 'UNUSED_EXTERNAL_IMPORT') {
                    const { message } = warning;
                    // ignore
                    if (message.includes('"vue"') ||
                        message.includes('"resolveComponent"') ||
                        message.includes('"@dcloudio/uni-h5"')) {
                        return;
                    }
                }
                warn(warning);
            },
            output: {
                sourcemapExcludeSources: !(0, shared_1.isArray)(rollupOutputOption) &&
                    (rollupOutputOption === null || rollupOutputOption === void 0 ? void 0 : rollupOutputOption.sourcemapExcludeSources) === false
                    ? false
                    : process.env.SOURCEMAP === 'true',
            },
        },
    };
}
exports.createBuild = createBuild;
