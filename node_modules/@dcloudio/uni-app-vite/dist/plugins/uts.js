"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.uniUtsV1Plugin = void 0;
const path_1 = __importDefault(require("path"));
const uni_cli_shared_1 = require("@dcloudio/uni-cli-shared");
const UTSProxyRE = /\?uts-proxy$/;
function isUTSProxy(id) {
    return UTSProxyRE.test(id);
}
function uniUtsV1Plugin() {
    return {
        name: 'uni:uts',
        apply: 'build',
        enforce: 'pre',
        resolveId(id, importer) {
            const module = (0, uni_cli_shared_1.resolveUtsAppModule)(id, importer ? path_1.default.dirname(importer) : process.env.UNI_INPUT_DIR);
            if (module) {
                // prefix the polyfill id with \0 to tell other plugins not to try to load or transform it
                return '\0' + module + '?uts-proxy';
            }
        },
        load(id) {
            if (isUTSProxy(id)) {
                return '';
            }
        },
        async transform(_, id, opts) {
            if (opts && opts.ssr) {
                return;
            }
            if (!isUTSProxy(id)) {
                return;
            }
            const { filename: module } = (0, uni_cli_shared_1.parseVueRequest)(id.replace('\0', ''));
            const result = await (0, uni_cli_shared_1.resolveUTSCompiler)().compile(module);
            if (result) {
                result.deps.forEach((dep) => {
                    this.addWatchFile(dep);
                });
                return result.code;
            }
        },
    };
}
exports.uniUtsV1Plugin = uniUtsV1Plugin;
